@page "/"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using System.Collections.ObjectModel
@using System.ComponentModel
@using System.IO
@inject IJSRuntime jsRuntime;


<div id="ControlRegion">
    <SfGrid ID="Grid" DataSource="@ObservableData" @ref="Grid" AllowPaging="true" AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowSelection="true"
            AllowSorting="true" Width="900">


        <GridPageSettings PageSizes="true"></GridPageSettings>

        <GridEvents OnToolbarClick="ToolbarClick" TValue="DataIntel"></GridEvents>
        <GridEvents RowSelected="RowSelecthandler" TValue="DataIntel"></GridEvents>
        <GridColumns>


            <GridColumn Field="@nameof(DataIntel.FileName)" HeaderText="Name" Width="100">

            </GridColumn>

            <GridColumn Field="@nameof(DataIntel.CreateDate)" HeaderText="Date" Width="60"></GridColumn>

        </GridColumns>
    </SfGrid>
    <label>Last Update</label>@dateTimeUpdated
</div>
<br/>

<br/>
<style>
    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }

    .list {
        float: left;
        line-height: 20px;
        margin: 10px;
        min-width: 200px;
    }
</style>

@code{
    private DateTime dateTimeUpdated;
    SfGrid<DataIntel> Grid;
    public string filePath { get; set; }

    public async Task RowSelecthandler(RowSelectEventArgs<DataIntel> Args)
    {
        filePath = Args.Data.FullFileName;

    //   var stream = new FileStream(@"path\to\file", FileMode.Open);
    //  return File(stream, "application/pdf", "FileDownloadName.ext"); 
        await jsRuntime.InvokeAsync<string>("open", $"/download?name={filePath}", "_blank");
    }

    public void ToolbarClick(ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_pdfexport")
        {
            Grid.PdfExport();
        }
    }

    private readonly FileSystemWatcher watcher = new();

    public ObservableCollection<DataIntel> ObservableData { get; set; } = new();

    private int uniqueid { get; set; }

    public void OnChanged(object source, FileSystemEventArgs e)
    {
        dateTimeUpdated = DateTime.Now;
        ObservableData.Add(new DataIntel {FileName = Path.GetFileName(e.Name), FullFileName = e.FullPath, CreateDate = File.GetCreationTime(e.FullPath)});
    }

    protected override void OnInitialized()
    {
        var allFiles = Directory.GetFiles(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "pdf"));
        ObservableData.Clear();
        foreach (var file in allFiles)
        {
            ObservableData.Add(new DataIntel {FileName = Path.GetFileName(file), FullFileName = file, CreateDate = File.GetCreationTime(file)});
        }
        try
        {
            watcher.Path = Path.Combine("/app", "pdf");
    // Watch both files and subdirectories.
            watcher.IncludeSubdirectories = true;
    // Watch for all changes specified in the NotifyFilters
    //enumeration.
            watcher.NotifyFilter = NotifyFilters.Attributes |
                                   NotifyFilters.CreationTime |
                                   NotifyFilters.DirectoryName |
                                   NotifyFilters.FileName |
                                   NotifyFilters.LastAccess |
                                   NotifyFilters.LastWrite |
                                   NotifyFilters.Security |
                                   NotifyFilters.Size;
    // Watch all files.
            watcher.Filter = "*.*";
    // Add event handlers.

            watcher.Created += OnChanged;
            watcher.Deleted += ondelete;

    // watcher.BeginInit();
    //Start monitoring.
            watcher.EnableRaisingEvents = true;
        }
        catch (IOException e)
        {
            Console.WriteLine("A Exception Occurred :" + e);
        }
        catch (Exception oe)
        {
            Console.WriteLine("An Exception Occurred :" + oe);
        }
    }

    private void ondelete(object sender, FileSystemEventArgs e)
    {
        var del = ObservableData.First(t => t.FileName.EndsWith(e.Name));
        ObservableData.Remove(del);
    }


    public class DataIntel : INotifyPropertyChanged
    {
        private int id;

        public int Id
        {
            get => id;
            set
            {
                id = value;
                NotifyPropertyChanged("Id");
            }
        }

        public DateTime CreateDate { get; set; }
        public string FileName { get; set; }
        public string FullFileName { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

}